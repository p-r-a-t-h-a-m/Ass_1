/**
 * @file latex_lexer.l
 * @brief Lexical analyzer for LaTeX-like syntax
 */

%{
    #include <string.h>
    //#include "parser.tab.h"  // Include the parser header generated by Bison
    //#define YY_DECL extern "C" int yylex()
%}

%option noyywrap

%%

"\\section\\{[^}]+\\}"      { yylval.str = std::string(yytext+9, yyleng-10); return SECTION_HEADING; }
"\\subsection\\{[^}]+\\}"   { yylval.str = std::string(yytext+12, yyleng-13); return SUBSECTION_HEADING; }

"\\textit\\{[^}]+\\}"       { yylval.str = std::string(yytext+8, yyleng-9); return ITALICS; }
"\\textbf\\{[^}]+\\}"       { yylval.str = std::string(yytext+8, yyleng-9); return BOLD; }

"\\hline"                 { return HORIZONTAL_LINE; }

"\\par"                   { return PARAGRAPH; }

"\\begin\\{verbatim\\}"[^"]*"\\end\\{verbatim\\}" { yylval.str = std::string(yytext+15, yyleng-31); return CODE_BLOCK; }

"\\href\\{[^}]+\\}\\{[^}]+\\}" { 
    char *url_start = strchr(yytext, '{') + 1;
    char *url_end = strchr(url_start, '}');
    yylval.link.url = std::string(url_start, url_end - url_start);
    yylval.link.text = std::string(url_end + 2, yyleng - (url_end - yytext + 3));
    return HYPERLINK; 
}

"\\includegraphics\\[[^]]*\\]\\{[^}]+\\}" { 
    yylval.image.path = std::string(strchr(yytext, '{') + 1, yyleng - (strchr(yytext, '{') - yytext + 2)); 
    return IMAGE; 
}

"\\begin\\{enumerate\\}"[^"]*"\\end\\{enumerate\\}" { return ORDERED_LIST; }

"\\begin\\{itemize\\}"[^"]*"\\end\\{itemize\\}" { return UNORDERED_LIST; }

"\\begin\\{tabular\\}\\{[^}]+\\}"([^"]*)"\\end\\{tabular\\}" { yylval.str = std::string(yytext+13, yyleng-26); return TABLE; }

[^\n]+                   { yylval.str = std::string(yytext, yyleng); return TEXT; }

\n                       { return NEWLINE; }

<<EOF>>                  { return E_O_F; }

%%

int main(int argc, char **argv) {
    printf("give input");
    yylex();
    return 0;
}
